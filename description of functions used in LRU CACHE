class LRUcache
{
    Node head=new Node(0,0), tail=new Node(0,0);
    MAP<Integer;
    Node MAP=new HashMap<>();
    int capacity;

   public LRUcache(int capacity)
   {this.capacity=capacity;
   head.next=tail;
   tail.prev=head;


    }
    public int get(int key)
    {
        if(map.containskey(key))
        {
           Node data=map.get(key);
           //now move this to top
           remove(data);
           insert(data);
           return data.value;

        }
        return -1;

    }
    public void put(int key,int value)
    {
        if (map.containskey(key))//if vallue is already present we move to top
        {remove(map.get(key));
        }
        if(capacity==map.size())//if cache is full
        {

            remove(tail.prev);
        }
        insert(new Node(key,value));

    }
    void remove(Node node)
    {

        map.remove(node.key);
        node.prev.next=node.next;
        node.next.prev=node.prev;
    }
    void insert(Node node)
    {

        map.put(node.key,node)
        node.next = head.next;
        //point head's next' prev to node
        head.next.prev = node;
        head.next=node;
        node.prev=head;
    }
    class Node
    {

        Node prev,next;
        int key,value;
        Node(int key,int value)
        {

            this.key=key;
            this.value=value;
        }
    };
};
